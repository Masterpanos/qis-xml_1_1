<?xml version="1.0" encoding="UTF-8"?>
<module name="plgah-qis-types"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:qis="plgah:qis-types:1_1">
  <yang-version value="1"/>
  <namespace uri="plgah:qis-types:1_1"/>
  <prefix value="qis"/>
  <organization>
    <text>Pascal L.G.A. Heus</text>
  </organization>
  <contact>
    <text>“pascal.heus@gmail.com”</text>
  </contact>
  <description>
    <text>This module contains YANG groupings and data types mirroring the QIS-XML 1.1 specification elements.</text>
  </description>
  <revision date="2016-09-05">
    <description>
      <text>Draft/Development version</text>
    </description>
    <reference>
      <text>QIS-XML: A metadata specification for Quantum Information Science</text>
    </reference>
  </revision>
  <grouping name="ComplexNumberType">
    <description>
      <text>A complex number</text>
    </description>
    <leaf name="r">
      <type name="decimal64">
        <fraction-digits value="10"/>
      </type>
      <default value="0"/>
      <description>
        <text>Real component</text>
      </description>
    </leaf>
    <leaf name="i">
      <type name="decimal64">
        <fraction-digits value="10"/>
      </type>
      <default value="0"/>
      <description>
        <text>Imaginary component</text>
      </description>
    </leaf>
    <list name="symbolic">
      <key value="syntax"/>
      <uses name="SymbolicExpressionType"/>
      <description>
        <text>Can be used to describe a symbolic expression for this value. 
When the real and imaginary values are not specified, this can be used for syntax evaluation to infer such values.</text>
      </description>
    </list>
  </grouping>
  <grouping name="InputType">
    <description>
      <text>Description of a gate/circuit input</text>
    </description>
    <leaf name="number">
      <type name="uint16"/>
      <description>
        <text>The input number (one based index)</text>
      </description>
    </leaf>
    <uses name="NameDescType">
      <description>
        <text>Input name and description</text>
      </description>
      <refine target-node="name">
        <mandatory value="true"/>
      </refine>
    </uses>
  </grouping>
  <grouping name="IdentificationType">
    <description>
      <text>An entity identifier</text>
    </description>
    <leaf name="agency">
      <type name="NcnameType"/>
      <description>
        <text>A unique identifier for the agency maintaining this entity. Can be inherioted from parent.</text>
      </description>
    </leaf>
    <leaf name="id">
      <type name="NcnameType"/>
      <mandatory value="true"/>
      <description>
        <text>A unique identifier within the container/agency</text>
      </description>
    </leaf>
    <leaf name="version">
      <type name="VersionType"/>
      <description>
        <text>The entity version number. Can be inherited from parent.</text>
      </description>
    </leaf>
    <leaf name="versionDescription">
      <type name="string"/>
      <description>
        <text>Version rationale / narrative</text>
      </description>
    </leaf>
  </grouping>
  <typedef name="NcnameType">
    <type name="string">
      <pattern value="[_A-Za-z][_\-A-Za-z0-9.]*"/>
    </type>
    <description>
      <text>A resource identifier</text>
    </description>
  </typedef>
  <grouping name="MatrixCellType">
    <leaf name="row">
      <type name="uint32"/>
      <description>
        <text>The cell row</text>
      </description>
    </leaf>
    <leaf name="col">
      <type name="uint32"/>
      <description>
        <text>The cell column</text>
      </description>
    </leaf>
    <uses name="ComplexNumberType"/>
    <description>
      <text>A cell representing a complex number in a Matrix</text>
    </description>
  </grouping>
  <grouping name="MatrixType">
    <description>
      <text>A matrix</text>
    </description>
    <leaf name="rows">
      <type name="uint32"/>
      <description>
        <text>The matrix number of rows</text>
      </description>
    </leaf>
    <leaf name="cols">
      <type name="uint32"/>
      <description>
        <text>The matrix number of columns</text>
      </description>
    </leaf>
    <list name="cell">
      <key value="row col"/>
      <uses name="MatrixCellType"/>
      <description>
        <text>A cell im this matrix. Zero valued cells are optional. </text>
      </description>
    </list>
  </grouping>
  <grouping name="NameDescType">
    <description>
      <text>A Name and Description</text>
    </description>
    <leaf name="name">
      <type name="string"/>
      <description>
        <text>The entity name</text>
      </description>
    </leaf>
    <leaf name="description">
      <type name="string"/>
      <description>
        <text>A detailed description of the entity</text>
      </description>
    </leaf>
  </grouping>
  <grouping name="OutputType">
    <description>
      <text>Description of a gate/circuit output</text>
    </description>
    <leaf name="number">
      <type name="uint16"/>
      <description>
        <text>The output number (one based index)</text>
      </description>
    </leaf>
    <uses name="NameDescType">
      <description>
        <text>Output name and description</text>
      </description>
      <refine target-node="name">
        <mandatory value="true"/>
      </refine>
    </uses>
  </grouping>
  <grouping name="CbitType">
    <leaf name="value">
      <type name="boolean"/>
      <description>
        <text>The bit value</text>
      </description>
    </leaf>
    <description>
      <text>A classic bit</text>
    </description>
  </grouping>
  <grouping name="QubitType">
    <container name="zero">
      <uses name="ComplexNumberType"/>
      <description>
        <text>The |0&gt; basis state of the Qubit</text>
      </description>
    </container>
    <container name="one">
      <uses name="ComplexNumberType"/>
      <description>
        <text>The |1&gt; basis state of the Qubit</text>
      </description>
    </container>
    <description>
      <text>A Quantum Bit</text>
    </description>
  </grouping>
  <grouping name="ReferenceType">
    <leaf name="agency">
      <type name="NcnameType"/>
      <description>
        <text>The referred resource agency.</text>
      </description>
    </leaf>
    <leaf name="id">
      <type name="NcnameType"/>
      <mandatory value="true"/>
      <description>
        <text>Thr resource identifier within the library/agency</text>
      </description>
    </leaf>
    <leaf name="version">
      <type name="VersionType"/>
      <description>
        <text>The resource version number. Can be inherited from parent.</text>
      </description>
    </leaf>
    <leaf name="library_id">
      <type name="NcnameType"/>
      <description>
        <text>The identifier of the library containing the resource</text>
      </description>
    </leaf>
    <leaf name="library_agency">
      <type name="NcnameType"/>
      <description>
        <text>The library agency, if different from the resource</text>
      </description>
    </leaf>
    <leaf name="library_version">
      <type name="NcnameType"/>
      <description>
        <text>The library version, if different from the resource</text>
      </description>
    </leaf>
    <description>
      <text>A reference to an Identifiable resource</text>
    </description>
  </grouping>
  <grouping name="SymbolicExpressionType">
    <description>
      <text>Can be used to describe a symbolic expression in various syntaxes</text>
    </description>
    <leaf name="value">
      <type name="string"/>
      <mandatory value="true"/>
      <description>
        <text>The symbolic expression</text>
      </description>
    </leaf>
    <leaf name="syntax">
      <type name="string"/>
      <description>
        <text>The symbolic syntax used for the value</text>
      </description>
    </leaf>
  </grouping>
  <grouping name="TransformationType">
    <description>
      <text>A unitary transformation represented as a square matrix of complex numbers</text>
    </description>
    <leaf name="size">
      <type name="uint32"/>
      <description>
        <text>The matrix n x n size</text>
      </description>
    </leaf>
    <container name="multiplier">
      <uses name="ComplexNumberType"/>
      <description>
        <text>A complex number to scale the matrix</text>
      </description>
    </container>
    <list name="cell">
      <key value="row col"/>
      <uses name="MatrixCellType"/>
      <description>
        <text>A cell in this matrix. Zero valued cells are optional. </text>
      </description>
    </list>
  </grouping>
  <typedef name="VersionType">
    <type name="string">
      <pattern value="\d|\d\.\d|\d\.\d\.\d"/>
    </type>
    <description>
      <text>A version number. Can be n / n.n / n.n.n</text>
    </description>
  </typedef>
  <grouping name="YangDummyKey">
    <description>
      <text>A YANG dummy key for reuse in lists</text>
    </description>
    <leaf name="yang-key">
      <type name="string"/>
      <description>
        <text>The key value</text>
      </description>
    </leaf>
  </grouping>
  <grouping name="GateType">
    <description>
      <text>A quantum gate</text>
    </description>
    <uses name="IdentificationType"/>
    <uses name="NameDescType">
      <refine target-node="name">
        <mandatory value="true"/>
      </refine>
    </uses>
    <leaf-list name="nickname">
      <type name="string"/>
      <description>
        <text>Short/alternate names</text>
      </description>
    </leaf-list>
    <list name="input">
      <key value="number"/>
      <uses name="InputType"/>
      <description>
        <text>Description of the gate input</text>
      </description>
    </list>
    <list name="output">
      <key value="number"/>
      <uses name="OutputType"/>
      <description>
        <text>Description of the gate output</text>
      </description>
    </list>
    <list name="parameter">
      <key value="name"/>
      <uses name="NameDescType"/>
      <container name="value">
        <uses name="ComplexNumberType"/>
        <description>
          <text>The parameter value</text>
        </description>
      </container>
      <description>
        <text>Allows for parameters to be passed to the gate for use in the computation of the Transformation matrix.</text>
      </description>
    </list>
    <container name="transformation">
      <uses name="TransformationType"/>
      <description>
        <text>The unitary transformation the gate performs</text>
      </description>
    </container>
  </grouping>
  <grouping name="GateLibrary">
    <description>
      <text>A collection of quantum gates</text>
    </description>
    <uses name="IdentificationType"/>
    <uses name="NameDescType"/>
    <list name="gate">
      <key value="agency id version"/>
      <uses name="GateType"/>
      <description>
        <text>The collection of gates in this libraryr</text>
      </description>
    </list>
  </grouping>
  <grouping name="CircuitType">
    <description>
      <text>A quantum circuit</text>
    </description>
    <uses name="IdentificationType"/>
    <uses name="NameDescType">
      <refine target-node="name">
        <mandatory value="true"/>
      </refine>
    </uses>
    <leaf name="size">
      <type name="uint32"/>
      <description>
        <text>The circuit size (number if inputs/outputs)</text>
      </description>
    </leaf>
    <list name="input">
      <key value="number"/>
      <uses name="InputType"/>
      <description>
        <text>Description of the gate input</text>
      </description>
    </list>
    <list name="output">
      <key value="number"/>
      <uses name="OutputType"/>
      <description>
        <text>Description of the gate output</text>
      </description>
    </list>
    <list name="step">
      <key value="yang-key"/>
      <uses name="StepType"/>
      <description>
        <text>Sequence of steps in this circuit</text>
      </description>
    </list>
  </grouping>
  <grouping name="CircuitLibrary">
    <description>
      <text>A collection of quantum circuits</text>
    </description>
    <uses name="IdentificationType"/>
    <uses name="NameDescType"/>
    <list name="circuit">
      <key value="agency id version"/>
      <uses name="CircuitType"/>
      <description>
        <text>The collection of circuits in this library</text>
      </description>
    </list>
  </grouping>
  <grouping name="GateEquivalentCircuitType">
    <description>
      <text>Describes a gate circuit equivalent, typically using univeral gates.</text>
    </description>
    <container name="gate-ref">
      <uses name="ReferenceType"/>
      <description>
        <text>A reference to the Gate the circuit is equivalent to</text>
      </description>
    </container>
    <list name="map">
      <key value="yang-key"/>
      <description>
        <text>Collection of maps for this equivalence</text>
      </description>
      <uses name="MapType"/>
    </list>
    <container name="circuit">
      <uses name="CircuitType"/>
      <description>
        <text>The circuit equivalent to the Gate/Circuit</text>
      </description>
    </container>
  </grouping>
  <grouping name="MapType">
    <uses name="YangDummyKey"/>
    <leaf name="number">
      <type name="uint32"/>
      <description>
        <text>Maps a wire/qubit/cbit to a circuit/gate input number (one based index)</text>
      </description>
    </leaf>
    <leaf name="input">
      <type name="uint32"/>
      <description>
        <text>The input number (one based index)</text>
      </description>
    </leaf>
    <leaf name="value">
      <type name="boolean"/>
      <mandatory value="true"/>
      <description>
        <text>If specified, set the input to a fixed value |0&gt; or |1&gt;.</text>
      </description>
    </leaf>
    <description>
      <text>Maps circuit wires to gate inputs. If not specified use natural order.</text>
    </description>
  </grouping>
  <grouping name="OperationType">
    <uses name="YangDummyKey"/>
    <leaf name="reverse">
      <type name="boolean"/>
      <description>
        <text>If true, indicates that the unitary transformation for this operation should be reversed (dagger/complex conjugate transform)</text>
      </description>
    </leaf>
    <list name="map">
      <key value="yang-key"/>
      <description>
        <text>Collection of maps for this Operation</text>
      </description>
      <uses name="MapType"/>
    </list>
    <choice name="transform">
      <description>
        <text>The transformation for this operation. Can be a gate, a circuit, or a measurement.</text>
      </description>
      <case name="gate-ref">
        <container name="gate-ref">
          <uses name="ReferenceType"/>
          <description>
            <text>A reference to the Gate implementing this Operation</text>
          </description>
        </container>
      </case>
      <case name="circuit-ref">
        <container name="circuit-ref">
          <uses name="ReferenceType"/>
          <description>
            <text>A reference to the Gate implementing this Operation</text>
          </description>
        </container>
      </case>
      <case name="measurement">
        <leaf name="measurement">
          <type name="empty"/>
          <description>
            <text>Applies a Measurement on mapped wire(s)</text>
          </description>
        </leaf>
      </case>
    </choice>
    <description>
      <text>An operation is a Gate with information mapping qubits or a fixed 0/1 value with the Gat or Circuit inputs</text>
    </description>
  </grouping>
  <grouping name="StepType">
    <description>
      <text>A execution step in a Circuit</text>
    </description>
    <uses name="YangDummyKey"/>
    <uses name="NameDescType"/>
    <list name="operation">
      <key value="yang-key"/>
      <uses name="OperationType"/>
      <description>
        <text>The collection of operations for this step</text>
      </description>
    </list>
  </grouping>
  <grouping name="MemoryType">
    <description>
      <text>Quantum Memory</text>
    </description>
    <leaf name="size">
      <type name="uint64"/>
      <description>
        <text>The memory size</text>
      </description>
    </leaf>
    <uses name="IdentificationType"/>
    <uses name="NameDescType"/>
    <uses name="PrepareType"/>
    <list name="qubit">
      <key value="yang-key"/>
      <uses name="YangDummyKey"/>
      <leaf name="index">
        <type name="uint64"/>
        <description>
          <text>The qubit position in memory</text>
        </description>
      </leaf>
      <container name="value">
        <uses name="ComplexNumberType"/>
        <description>
          <text>Qubit value</text>
        </description>
      </container>
      <description>
        <text>Qubit value</text>
      </description>
    </list>
  </grouping>
  <grouping name="PrepareType">
    <description>
      <text>Prepares/initalizes quantum memory</text>
    </description>
    <leaf name="reset">
      <type name="boolean"/>
      <description>
        <text>Resets all qubits to |0&gt;</text>
      </description>
    </leaf>
    <list name="qubit-set">
      <key value="yang-key"/>
      <description>
        <text>Collection of values to set one or more qubits to</text>
      </description>
      <uses name="YangDummyKey"/>
      <choice name="qubits">
        <description>
          <text>The range of affected qubits</text>
        </description>
        <case name="qubit-index">
          <leaf name="qubit-index">
            <type name="uint64"/>
            <description>
              <text>Sets the qubit as specified memory position</text>
            </description>
          </leaf>
        </case>
        <case name="qubit-range">
          <container name="qubit-range">
            <leaf name="start">
              <type name="uint64"/>
              <description>
                <text>Start index position</text>
              </description>
            </leaf>
            <leaf name="end">
              <type name="uint64"/>
              <description>
                <text>End index position</text>
              </description>
            </leaf>
            <description>
              <text>Sets all qubits within specified memory range</text>
            </description>
          </container>
        </case>
      </choice>
      <container name="value">
        <uses name="ComplexNumberType"/>
        <description>
          <text>The value to set the qubit(s) to (can be complex)</text>
        </description>
      </container>
    </list>
  </grouping>
  <grouping name="ProgramType">
    <description>
      <text>A quantum program</text>
    </description>
    <uses name="IdentificationType"/>
    <uses name="NameDescType">
      <refine target-node="name">
        <mandatory value="true"/>
      </refine>
    </uses>
    <container name="memory">
      <uses name="MemoryType"/>
      <description>
        <text>Program local allocated quantum memory</text>
      </description>
    </container>
    <list name="register">
      <key value="agency id version"/>
      <uses name="RegisterType"/>
      <description>
        <text>Collection of program level memory register(s)</text>
      </description>
    </list>
    <list name="statement">
      <key value="yang-key"/>
      <uses name="YangDummyKey"/>
      <description>
        <text>The collection of statements</text>
      </description>
      <choice name="statement-type">
        <description>
          <text>The choice of statements</text>
        </description>
        <case name="execute">
          <container name="execute">
            <description>
              <text>Executes a circuit</text>
            </description>
            <choice name="register-choice">
              <description>
                <text>The memory local or external register to use. Must match the circuit size</text>
              </description>
              <case name="register">
                <container name="register">
                  <uses name="RegisterType"/>
                  <description>
                    <text>Locally defined register</text>
                  </description>
                </container>
              </case>
              <case name="external-register">
                <container name="register-ref">
                  <uses name="ReferenceType"/>
                  <description>
                    <text>Reference to the external register</text>
                  </description>
                </container>
              </case>
            </choice>
            <choice name="circuit-choice">
              <description>
                <text>The local or external circuit to execute</text>
              </description>
              <case name="local-circuit">
                <container name="circuit">
                  <uses name="CircuitType"/>
                  <description>
                    <text>Circuit to execute</text>
                  </description>
                </container>
              </case>
              <case name="external-circuit">
                <container name="circuit-ref">
                  <uses name="ReferenceType"/>
                  <description>
                    <text>Reference to Circuit to execute</text>
                  </description>
                </container>
              </case>
            </choice>
          </container>
        </case>
        <case name="measure">
          <container name="measure">
            <choice name="register-choice">
              <description>
                <text>The memory register to use</text>
              </description>
              <case name="local-register">
                <container name="register">
                  <uses name="RegisterType"/>
                  <description>
                    <text>Locally defined register</text>
                  </description>
                </container>
              </case>
              <case name="external-register">
                <container name="register-ref">
                  <uses name="ReferenceType"/>
                  <description>
                    <text>Reference to the external register</text>
                  </description>
                </container>
              </case>
            </choice>
            <description>
              <text>Performs a measurement on register</text>
            </description>
          </container>
        </case>
      </choice>
    </list>
  </grouping>
  <grouping name="ProgramLibrary">
    <description>
      <text>A collection of Programs</text>
    </description>
    <uses name="IdentificationType"/>
    <uses name="NameDescType"/>
    <list name="program">
      <key value="agency id version"/>
      <uses name="ProgramType"/>
      <description>
        <text>The collection of programs in this library</text>
      </description>
    </list>
  </grouping>
  <grouping name="RegisterType">
    <description>
      <text>A memory register (subset) to be used for execution. If is hightly recommended for such register to contain an Indentification element (but it could also be referred to by index value). This is somewhat a equivalent of a variable.</text>
    </description>
    <leaf name="size">
      <type name="uint64"/>
      <description>
        <text>The register size</text>
      </description>
    </leaf>
    <uses name="IdentificationType"/>
    <uses name="NameDescType"/>
    <container name="memory-ref">
      <uses name="ReferenceType"/>
      <description>
        <text>If not using a Program local memory, a reference theto an external memory (global or from another program)</text>
      </description>
    </container>
    <leaf-list name="qubit-index">
      <type name="uint64"/>
      <description>
        <text>Selects a specific qubit in memory</text>
      </description>
    </leaf-list>
    <list name="qubit-range">
      <key value="yang-key"/>
      <uses name="YangDummyKey"/>
      <leaf name="start">
        <type name="uint64"/>
        <description>
          <text>Start index position</text>
        </description>
      </leaf>
      <leaf name="end">
        <type name="uint64"/>
        <description>
          <text>End index position</text>
        </description>
      </leaf>
      <description>
        <text>Selects a range of qubits from memory</text>
      </description>
    </list>
    <list name="register-ref">
      <key value="agency id version"/>
      <uses name="ReferenceType"/>
      <description>
        <text>Include another Register qubits</text>
      </description>
    </list>
    <container name="prepare">
      <uses name="PrepareType"/>
      <description>
        <text>Prepares/initializes this register</text>
      </description>
    </container>
  </grouping>
</module>
